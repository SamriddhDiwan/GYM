{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samriddh Diwan\\\\Desktop\\\\GYM\\\\gym\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ExerciseCard from \"./Exercisecard\";\nimport NewExercise from \"./Searchable\";\nimport exerciseList from \"./Exercise\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currExercises, handleExercises] = useState({\n    \"Chest Press\": [{\n      sno: 1,\n      reps: \"10\",\n      weight: \"10\"\n    }]\n  });\n  const [value, setValue] = useState(\"\");\n  function addNewSet(newSetDetails, exerciseName) {\n    handleExercises(prev => {\n      var _prev$exerciseName;\n      return {\n        ...prev,\n        [exerciseName]: [...(prev[exerciseName] || []),\n        // Ensure existing array or fallback to empty\n        {\n          sno: (((_prev$exerciseName = prev[exerciseName]) === null || _prev$exerciseName === void 0 ? void 0 : _prev$exerciseName.length) || 0) + 1,\n          // Handle sno dynamically\n          reps: newSetDetails.reps,\n          weight: newSetDetails.weight\n        }]\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(currExercises).map((exerciseName, index) => /*#__PURE__*/_jsxDEV(ExerciseCard, {\n      exerciseName: exerciseName,\n      sets: currExercises[exerciseName] // Pass sets to ExerciseCard\n      ,\n      addNewSet: newSetDetails => addNewSet(newSetDetails, exerciseName)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fBQi8tZWquaqykBlI+3J7YTwyUo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ExerciseCard","NewExercise","exerciseList","jsxDEV","_jsxDEV","App","_s","currExercises","handleExercises","sno","reps","weight","value","setValue","addNewSet","newSetDetails","exerciseName","prev","_prev$exerciseName","length","children","Object","keys","map","index","sets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samriddh Diwan/Desktop/GYM/gym/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ExerciseCard from \"./Exercisecard\";\r\nimport NewExercise from \"./Searchable\";\r\nimport exerciseList from \"./Exercise\";\r\n\r\nfunction App() {\r\n  const [currExercises, handleExercises] = useState({\r\n    \"Chest Press\": [{ sno: 1, reps: \"10\", weight: \"10\" }]\r\n  });\r\n\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  function addNewSet(newSetDetails, exerciseName) {\r\n    handleExercises((prev) => {\r\n      return {\r\n        ...prev,\r\n        [exerciseName]: [\r\n          ...(prev[exerciseName] || []), // Ensure existing array or fallback to empty\r\n          {\r\n            sno: (prev[exerciseName]?.length || 0) + 1, // Handle sno dynamically\r\n            reps: newSetDetails.reps,\r\n            weight: newSetDetails.weight\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Uncomment and modify NewExercise when needed */}\r\n      {/* \r\n        <NewExercise\r\n          options={exerciseList}\r\n          label=\"name\"\r\n          id=\"id\"\r\n          selectedVal={value}\r\n          handleChange={(val) => setValue(val)}\r\n          addNewExercise={addNewExerciseCard}\r\n        />\r\n      */}\r\n\r\n      {Object.keys(currExercises).map((exerciseName, index) => (\r\n        <ExerciseCard\r\n          key={index}\r\n          exerciseName={exerciseName}\r\n          sets={currExercises[exerciseName]} // Pass sets to ExerciseCard\r\n          addNewSet={(newSetDetails) => addNewSet(newSetDetails, exerciseName)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,YAAY,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC;IAChD,aAAa,EAAE,CAAC;MAAEU,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE,IAAI;MAAEC,MAAM,EAAE;IAAK,CAAC;EACtD,CAAC,CAAC;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtC,SAASe,SAASA,CAACC,aAAa,EAAEC,YAAY,EAAE;IAC9CR,eAAe,CAAES,IAAI,IAAK;MAAA,IAAAC,kBAAA;MACxB,OAAO;QACL,GAAGD,IAAI;QACP,CAACD,YAAY,GAAG,CACd,IAAIC,IAAI,CAACD,YAAY,CAAC,IAAI,EAAE,CAAC;QAAE;QAC/B;UACEP,GAAG,EAAE,CAAC,EAAAS,kBAAA,GAAAD,IAAI,CAACD,YAAY,CAAC,cAAAE,kBAAA,uBAAlBA,kBAAA,CAAoBC,MAAM,KAAI,CAAC,IAAI,CAAC;UAAE;UAC5CT,IAAI,EAAEK,aAAa,CAACL,IAAI;UACxBC,MAAM,EAAEI,aAAa,CAACJ;QACxB,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,oBACEP,OAAA;IAAAgB,QAAA,EAaGC,MAAM,CAACC,IAAI,CAACf,aAAa,CAAC,CAACgB,GAAG,CAAC,CAACP,YAAY,EAAEQ,KAAK,kBAClDpB,OAAA,CAACJ,YAAY;MAEXgB,YAAY,EAAEA,YAAa;MAC3BS,IAAI,EAAElB,aAAa,CAACS,YAAY,CAAE,CAAC;MAAA;MACnCF,SAAS,EAAGC,aAAa,IAAKD,SAAS,CAACC,aAAa,EAAEC,YAAY;IAAE,GAHhEQ,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvB,EAAA,CA/CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}